################################################################################
#### DSEM MODELFIT ####
# run_simulation_all_models
# Authors: Prof. Holger Brandt, Mihai Falcusan, Kim Zierahn
# Date: 01/2025
################################################################################



# This file does the following:
# - Imports requirements and sets hyperparams for simulation run based on simulation nr
# - Manually defines 10 simulation conditions based on simulation_workload_calculator.R
# - Runs model simulations for desired conditions and saves results exp

################################################################################
#### 1. Read system configurations from sbatch file
################################################################################

# find cluster working directory
current_dir <- tryCatch({
  args <- commandArgs(trailingOnly = FALSE)
  file_flag <- "--file="
  script_path <- NULL
  
  for (arg in args) {
    if (startsWith(arg, file_flag)) {
      script_path <- sub(file_flag, "", arg)
      break
    }
  }
  
  if (!is.null(script_path)) {
    dirname(normalizePath(script_path))
  } else {
    stop("Could not determine script path")
  }
}, error = function(e) {
  getwd()  # Fallback to working directory
})

print(current_dir)
current_dir = "C:/Users/mihai/Documents/Faculta/Research Project/dsem_modelfit/src"

# Automatically load all libraries only once ###################################
source(file.path(current_dir,  "load_libraries.R"))

# load all other required files ################################################
source(file.path(current_dir,  "lavaan_dsem_models_randomintercept.R"))
source(file.path(current_dir,  "gen_data_version03.R"))
source(file.path(current_dir,  "gen_data_version04.R"))
source(file.path(current_dir,  "lavaan_dsem_nullmodels.R"))
#source(file.path(current_dir,  "fitfunctions_stan.R"))
source(file.path(current_dir,  "lavaan_dsem_models_randomintercept_tt.R"))
source(file.path(current_dir,  "lavaan_dsem_models_randomintercept_tt1.R"))
source(file.path(current_dir,  "helper_functions_sim.R"))

# Workloads

# 1.3 define 10 equal workloads ################################################

# Define all workloads directly in R. these were computed via simulation_workload_calculator.R
# to have an approx. equal workload. when init one of 10 workloads via bash argument,
# the R file reads one of these and simulates all the N_t and N_p it contains

workloads <- list(
  sim_1 = list(
    total_workload = 30015,
    combinations = data.frame(
      timepoint = c(15),
      person_size = c(2001)
    )
  ),
  sim_2 = list(
    total_workload = 22515,
    combinations = data.frame(
      timepoint = c(15),
      person_size = c(1501)
    )
  ),
  sim_3 = list(
    total_workload = 20616,
    combinations = data.frame(
      timepoint = c(10, 3, 2, 1),
      person_size = c(2001, 121, 91, 61)
    )
  ),
  sim_4 = list(
    total_workload = 20593,
    combinations = data.frame(
      timepoint = c(15, 10, 1, 4, 1, 2),
      person_size = c(1001, 211, 2001, 181, 501, 121)
    )
  ),
  sim_5 = list(
    total_workload = 20576,
    combinations = data.frame(
      timepoint = c(10, 2, 5, 5, 3, 1),
      person_size = c(1501, 1501, 211, 151, 181, 211)
    )
  ),
  sim_6 = list(
    total_workload = 20623,
    combinations = data.frame(
      timepoint = c(10, 3, 3, 1, 1, 2, 2, 1),
      person_size = c(1001, 1501, 1001, 1501, 1001, 181, 61, 121)
    )
  ),
  sim_7 = list(
    total_workload = 20588,
    combinations = data.frame(
      timepoint = c(5, 5, 5, 3, 5, 3, 1, 1),
      person_size = c(2001, 1001, 501, 501, 181, 151, 181, 31)
    )
  ),
  sim_8 = list(
    total_workload = 20621,
    combinations = data.frame(
      timepoint = c(4, 10, 4, 2, 4, 4, 3),
      person_size = c(2001, 501, 1001, 1001, 211, 121, 91)
    )
  ),
  sim_9 = list(
    total_workload = 20595,
    combinations = data.frame(
      timepoint = c(15, 3, 15, 4, 2, 4, 2),
      person_size = c(501, 2001, 211, 501, 501, 151, 151)
    )
  ),
  sim_10 = list(
    total_workload = 20618,
    combinations = data.frame(
      timepoint = c(5, 4, 2, 10, 3, 2, 1, 1),
      person_size = c(1501, 1501, 2001, 181, 211, 211, 151, 91)
    )
  )
)

################################################################################
# 2. Simulation
################################################################################

# 2.1 Read workload number from bash and select workload #######################

# Get simulation number from command line arguments

#TODO: uncomment reading bash args
# args <- commandArgs(trailingOnly = TRUE)
# if (length(args) != 1) {
#   stop("Usage: Rscript run_simulation.R <simulation_number>")
# }
# sim_num <- as.numeric(args[1])

# TODO: comment out following row
sim_num = 5



# Get current simulation workload
current_sim <- workloads[[paste0("sim_", sim_num)]]
if (is.null(current_sim)) {
  stop(paste("No configuration found for simulation", sim_num))
}

# 2.2 Define sim fkt and reproducible seed #####################################


run_sim <- function(Timepoints, Person_size, core) {
  # this function contains everything that a single parallel core/worker does
  
  # load all other required files again (might be redundant)#
  source(file.path(current_dir,  "lavaan_dsem_models_randomintercept.R"))
  source(file.path(current_dir,  "gen_data_version03.R"))
  source(file.path(current_dir,  "gen_data_version04.R"))
  source(file.path(current_dir,  "lavaan_dsem_nullmodels.R"))
  #source(file.path(current_dir,  "fitfunctions_stan.R"))
  source(file.path(current_dir,  "lavaan_dsem_models_randomintercept_tt.R"))
  source(file.path(current_dir,  "lavaan_dsem_models_randomintercept_tt1.R"))
  source(file.path(current_dir,  "helper_functions_sim.R"))
  # 1.2 set all hyperparameters excluding N_t and N_p ############################
  
  # Save as filetype (one of local, RDS, csv)
  save_as = 'csv'
  # Size of crossloading (indicating misfit)
  Size_crossloading <- c(0,.3,.6)
  # What models to specify and run: within time points/ between time points
  Type_crossloading <- c("none","tt","tt1")
  # Number of data samples to generate and run model fit on them
  N_sim_samples <- 1 # because each core does 1?
  
  # DSEM model params
  phi0 <- diag(2)*.7+.3  # cov(eta)
  mu0  <- c(0, 0)        # mean(eta)
  ar0  <- c(.3, .3)      # ar(1) structure
  ly00 <- .6
  ly0  <- matrix(c(ly00, ly00, ly00, 0, 0, 0,
                   0, 0, 0, ly00, ly00, ly00), 6, 2, byrow = F) # factor loadings
  td   <- diag(6)*(1 - ly00^2) # cond. var(y) -> res var
  
  # frequentist fit indices
  fitnom_lavaan <- c("npar","fmin","chisq","df","pvalue","baseline.chisq","baseline.df",
                     "baseline.pvalue","cfi","tli","nnfi","rfi","nfi","pnfi","ifi","rni",
                     "logl","unrestricted.logl","aic","bic","ntotal","bic2","rmsea","rmsea.ci.lower",
                     "rmsea.ci.upper","rmsea.ci.level","rmsea.pvalue","rmsea.close.h0","rmsea.notclose.pvalue",
                     "rmsea.notclose.h0","rmr","rmr_nomean","srmr","srmr_bentler","srmr_bentler_nomean",
                     "crmr","crmr_nomean","srmr_mplus","srmr_mplus_nomean","cn_05","cn_01","gfi",
                     "agfi","pgfi","mfi","ecvi") 
  # bayesian fit indices
  fitnom_blavaan <- c("npar", "PPP", "MargLogLik", 
                      "BRMSEA", "BGammaHat", "adjBGammaHat", "BMc", 
                      "BCFI_0C", "BTLI_0C", "BNFI_0C",
                      "BCFI_0A", "BTLI_0A", "BNFI_0A",
                      "chisq", "pd")
  fitnom_stan <- c("BRMSEA", "BGammahat", "adjBGammahat", 
                   "BMc", "pd_1", "p_1", "loglik", "logliksat_1", "chisq")
  
  
  #cat(sprintf("Running with timepoint=%d, person_size=%d\n", Timepoints, Person_size))
  
  # Defining functions again to help parallelisation (might also be redundant 
  # since we are importing helper functions again in each worker init 
  
  ### LAVAAN ###
  # Helper function to fit a single model, capture fit specific errors for later
  # Input: data y0
  # Output: model res1
  fit_model_lav <- function(y0, N_timep){ 
    
    res1 <- try(sem(dsem[[N_timep]], data = y0, std.lv = TRUE), silent = TRUE)
    
    # if there is no try-error
    if(!inherits(res1, "try-error")){ 
      # if model converged: save fit indices
      if(res1@optim$converged == T){ 
        fitmeasures(res1)  
      }
      else { # if model did not converge: save NAs so that simulation doesnt get broken
        return(rep(NA, length(fitnom_lavaan)))
      }
    } 
    else { # if there is a try-error: save NAs so that simulation doesnt get broken
      return(rep(NA, length(fitnom_lavaan)))
    }
  }
  
  
  fit_model_blav <- function(y0, N_timep){ 
    
    # At the start of the function
    cat("Starting fit_model_blav with N_timep =", N_timep, "\n")
    print(str(y0))  # Check input data structure
    # First check if null models fit successfully
    print("nullmodel_0A")
    nullmodel_0A <- try(bsem(null_model_0A(N_timep), data = y0, 
                             n.chains = 4, burnin = 1000, sample = 1000), silent = TRUE)
    
    if(inherits(nullmodel_0A, "try-error")) {
      cat("Null model 0A failed to fit\n")
      return(rep(NA, length(fitnom_blavaan)))
    }
    
    print("nullmodel_0C")
    nullmodel_0C <- try(bsem(null_model_0C(N_timep), data = y0, 
                             n.chains = 4, burnin = 1000, sample = 1000), silent = TRUE)
    
    if(inherits(nullmodel_0C, "try-error")) {
      cat("Null model 0C failed to fit\n")
      return(rep(NA, length(fitnom_blavaan)))
    }
    
    print("res1")
    res1 <- try(bsem(dsem[[N_timep]], data = y0, std.lv = TRUE,
                     n.chains = 4, burnin = 1000, sample = 1000), silent = TRUE)
    
    if(!inherits(res1, "try-error")){ 
      if(blavInspect(res1, "converged") == TRUE){ 
        # Add error checking for fit indices
        tryCatch({
          fit_indices_C <- blavFitIndices(res1, baseline.model = nullmodel_0C)
          fit_indices_A <- blavFitIndices(res1, baseline.model = nullmodel_0A)
          
          BCFI_0C <- mean(fit_indices_C@indices$BCFI)
          BTLI_0C <- mean(fit_indices_C@indices$BTLI)
          BNFI_0C <- mean(fit_indices_C@indices$BNFI)
          
          BCFI_0A <- mean(fit_indices_A@indices$BCFI)
          BTLI_0A <- mean(fit_indices_A@indices$BTLI)
          BNFI_0A <- mean(fit_indices_A@indices$BNFI)
          
          # remaining fit indices (using either one, they should be the same)
          BRMSEA <- mean(fit_indices_A@indices$BRMSEA)
          BGammaHat <- mean(fit_indices_A@indices$BGammaHat)
          adjBGammaHat <- mean(fit_indices_A@indices$adjBGammaHat)
          BMc <- mean(fit_indices_A@indices$BMc)
          
          npar <- blavInspect(res1, "npar")
          marg_loglik <- blavInspect(res1, "test")[[1]]$stat
          ppp <- blavInspect(res1, "test")[[2]]$stat
          chisq <- mean(fit_indices_A@details$chisq)
          pd <- fit_indices_A@details$pD
          
          modelfit <- c(npar, ppp, marg_loglik, 
                        BRMSEA, BGammaHat, adjBGammaHat, BMc, 
                        BCFI_0C, BTLI_0C, BNFI_0C, 
                        BCFI_0A, BTLI_0A, BNFI_0A, 
                        chisq, pd)
          fitresults <- matrix(modelfit, nrow = 1)
          colnames(fitresults) <- fitnom_blavaan
          
          return(fitresults)
        }, error = function(e) {
          cat("Error in fit indices calculation:", conditionMessage(e), "\n")
          return(rep(NA, length(fitnom_blavaan)))
        })
      } else {
        cat("Model did not converge\n")
        return(rep(NA, length(fitnom_blavaan)))
      }
    } else {
      cat("Model fitting failed\n")
      return(rep(NA, length(fitnom_blavaan)))
    }
  }
  
  
  ### STAN ###
  fit_model_stan <- function(ydat, ydat2, timepoints, person_size){ 
    
    # load and compile model
    rt1 <- try(stanc("model3_dsem.stan"))
    sm1 <- try(stan_model(stanc_ret = rt1, verbose=FALSE)) 
    
    # parameter names
    params2 <- c("ly", "sigmaeps", "sigmaeta1", "sigmaeta2", "ty", "ka", "beta1")
    
    data.stan1 <- list(N = person_size, Nt = timepoints, y = ydat)
    fit1 <- try(sampling(sm1, data = data.stan1))
    
    
    # if there is no try-error
    if(!inherits(fit1, "try-error")){ 
      # save fit indices
      modelfit <- getfit(fit1, ydat, ydat2)
      fitresults1 <- matrix(modelfit, nrow = 1)
      colnames(fitresults1) <- fitnom_stan
      return(fitresults1)
    } 
    else { # if there is a try-error: save NAs so that simulation doesnt get broken
      rep(NA, length(fitnom_stan))
    }
  } 
  
  
  #### Other functions ####
  
  # Helper function to initialize factor loadings
  initialize_ly1 <- function(Type_misfit, Size_misfit) {
    if (Type_misfit == "tt") {
      return(matrix(c(0, 0, 0, Size_misfit, 0, 0,
                      0, 0, 0, 0, 0, 0), 6, 2, byrow = F))
    } else if (Type_misfit == "tt1") {
      return(matrix(c(Size_misfit, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0), 6, 2, byrow = F))
    } else {
      return(matrix(c(0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0), 6, 2, byrow = F)) # For "none"
    }
  }
  
  # Helper function to initialize simulation specific data set
  generate_temp_data <- function(Type_crossloading, N_pers, N_timep, phi0, mu0, ar0, ly0, ly1, td) {
    if (Type_crossloading == "tt") {
      return(gendata01(N_pers, N_timep, phi0, mu0, ar0, ly0, ly1, td))
    } else if (Type_crossloading == "tt1") {
      return(gendata02(N_pers, N_timep, phi0, mu0, ar0, ly0, ly1, td))
    } else if (Type_crossloading == "none"){
      return(gendata01(N_pers, N_timep, phi0, mu0, ar0, ly0, ly1, td))
    } else {
      stop("Invalid misfit type. Must be one of tt, tt1, none")
    }
  }
  
  # Main simulation loop #######################################################
  
  
  library(blavaan)  # Inside your run_sim function. TODO: do we need this?
  for (i_pers in seq_along(Person_size)) {
    for (i_timep in seq_along(Timepoints)) {
      
      N_pers <- Person_size[i_pers]
      N_timep <- Timepoints[i_timep]
      
      # if condition: match pos i of N_pers to pos i of N_timep. This is needed for workloads
      if(i_pers == i_timep){
        #print(paste("Matching position:", i_pers, "-> N_pers:", N_pers, "N_timep:", N_timep))
        #print(str(Timepoints))
        #print(str(Person_size))
        
        # Check theoretical specification requirement
        if (N_timep * 6 >= N_pers) next
        for (Type_misfit in Type_crossloading) {
          
          # Set random seed for reproducibility
          # TODO: why do we put the core inside the random seed? if we run the simulation
          # again on a different number of cores, it will produce different results.
          set.seed(131212023 + core + N_pers + N_timep * 1000 + as.numeric(as.factor(Type_misfit)) * 10000)
          # saving random seed. TODO: why?
          seed <- .Random.seed
          
          # Picking conditions. Since we are not interested in power, we just want
          # to fit 1 model with no misfit & type none, and then foreach misfit type
          # 1 with misfit size = 0.3, one 0.6.
          for (Size_misfit in Size_crossloading) {
            # if type tt or tt1, dont run size=0, else run
            if(Size_misfit == 0 && Type_misfit != "none"){
              #cat('skipped over misfit type:', Type_misfit, " and size:", Size_misfit, "\n")
            }else if(Size_misfit != 0 && Type_misfit == "none"){
              #cat('skipped over misfit type:', Type_misfit, " and size:", Size_misfit, "\n")
            }else{ 
              
              # Initialize factor loadings for the current condition
              ly1 <- initialize_ly1(Type_misfit, Size_misfit)
              
              # Prepare file name
              Exp_name_info <- paste(N_pers, N_timep, Type_misfit,
                                     Size_misfit, "core", core, "v03_rand", sep = "_")
              
              # Initialize empty matrix to store fit indices
              fitm_lavaan <- matrix(NA, N_sim_samples, length(fitnom_lavaan))
              fitm_blavaan <- matrix(NA, N_sim_samples, length(fitnom_blavaan))
              #fitm_stan <- matrix(NA, N_sim_samples, length(fitnom_stan))
              
              
              # Loop over samples
              for (Index_sample in 1:N_sim_samples) {
                temp_dat <- generate_temp_data(Type_misfit, N_pers, N_timep, phi0, mu0, ar0, ly0, ly1, td)
                ydat <- temp_dat$y # use array version of data for stan
                ydat2 <- temp_dat$y0 # use the transformed version in the getfit function
                
                
                # Check if data is positive definite
                if (temp_dat[["is_positive_def"]]) {
                  y0 <- temp_dat[["y0"]]
                  cat("Fit lavaan model and store results for core =", core)
                  fitm_lavaan[Index_sample, ] <- fit_model_lav(ydat2, N_timep) # Fit model and store results
                  #View(fitm_lavaan)
                  cat("Fit blavaan model and store results for core =", core)
                  fitm_blavaan[Index_sample, ] <- fit_model_blav(ydat2, N_timep) # Fit model and store results
                  #cat("Fit stan model and store results for core =", core)
                  #fitm_stan[Index_sample, ] <- as.numeric(fit_model_stan(ydat, ydat2, N_timep, N_pers)) # Fit model and store results
                  
                }
              }
              
              # Print model being saved after simulation block
              cat('Ran misfit_type:', Type_misfit, ' misfit_size:', Size_misfit, ' for', N_sim_samples, 'indep samples', '\n')
              # Save results
              colnames(fitm_lavaan) <- fitnom_lavaan
              colnames(fitm_blavaan) <- fitnom_blavaan
              #colnames(fitm_stan) <- fitnom_stan
              
              
              # Move up one directory level to dsem_modelfit
              parent_dir <- dirname(current_dir)
              # Define the experiment name
              Exp_day <- format(Sys.time(), "%Y-%m-%d") # Format: YYYY-MM-DD_HH-MM-SS
              # Specify the save directory in dsem_modelfit/exp
              save_dir <- file.path(parent_dir, "exp", Exp_day)
              # Create the day directory if it does not exist
              if (!dir.exists(save_dir)) {
                dir.create(save_dir, recursive = TRUE)
              }
              
              # # Save model with time, core, condition to have tractability
              # if(save_as == 'local'){
              #   # Initialize an empty dataframe to store results across runs
              #   if (!exists("lavaan_simulation_results_df")) {
              #     lavaan_simulation_results_df <- data.frame()
              #   }
              #   
              #   if (!exists("blavaan_simulation_results_df")) {
              #     blavaan_simulation_results_df <- data.frame()
              #   }
              #   
              #   #if (!exists("stan_simulation_results_df")) {
              #   #  stan_simulation_results_df <- data.frame()
              #   #}
              #   
              #   
              #   # Add the current fitm_lavaan as a new row (ensure it can be coerced into a dataframe)
              #   if (is.data.frame(fitm_lavaan)) {
              #     fitm_lavaan_row <- fitm_lavaan
              #   } else {
              #     fitm_lavaan_row <- as.data.frame(fitm_lavaan)
              #   }
              #   
              #   if (is.data.frame(fitm_blavaan)) {
              #     fitm_blavaan_row <- fitm_blavaan
              #   } else {
              #     fitm_blavaan_row <- as.data.frame(fitm_blavaan)
              #   }
              #   
              #   #if (is.data.frame(fitm_stan)) {
              #   #  fitm_stan_row <- (fitm_stan)
              #   #} else {
              #   #  fitm_stan_row <- as.data.frame((fitm_stan))
              #   #}
              #   
              #   # Optionally add simulation metadata (e.g., Exp_name_info) to the row
              #   fitm_lavaan_row$Exp_name_info <- Exp_name_info
              #   fitm_blavaan_row$Exp_name_info <- Exp_name_info
              #   #fitm_stan_row$Exp_name_info <- Exp_name_info
              #   
              #   # Append the row to the dataframe
              #   lavaan_simulation_results_df <- rbind(lavaan_simulation_results_df, fitm_lavaan_row)
              #   blavaan_simulation_results_df <- rbind(blavaan_simulation_results_df, fitm_blavaan_row)
              #   #stan_simulation_results_df <- rbind(stan_simulation_results_df, fitm_stan_row)
              #   
              # }else if(save_as == 'RDS'){
              #   # Save your RDS file in the desired directory with EXP_NAME in the filename
              #   saveRDS(fitm_lavaan, file = file.path(save_dir, paste0("lavaan_", Exp_name_info,"_time_",Exp_time, ".RDS")))
              #   saveRDS(fitm_blavaan, file = file.path(save_dir, paste0("blavaan_", Exp_name_info,"_time_",Exp_time, ".RDS")))
              #   #saveRDS(fitm_stan, file = file.path(save_dir, paste0("stan_", Exp_name_info,"_time_",Exp_time, ".RDS")))
              # }else if(save_as == 'csv'){
              #   csv_path_lavaan <- file.path(save_dir, paste0("lavaan_", Exp_name_info, "_worker_", worker_id, ".csv"))
              #   write.csv(fitm_lavaan, file = csv_path_lavaan, row.names = FALSE)
              #   csv_path_blavaan <- file.path(save_dir, paste0("blavaan_", Exp_name_info,"_worker_", worker_id, ".csv"))
              #   write.csv(fitm_blavaan, file = csv_path_blavaan, row.names = FALSE)
              #   #csv_path_stan <- file.path(save_dir, paste0("stan_", Exp_name_info,"_worker_", worker_id, ".csv"))
              #   #write.csv(fitm_stan, file = csv_path_stan, row.names = FALSE)
              # }else{
              #   cat("Format of type", save_as, " cannot be saved.")
              #   stop("Wrong file format argument")
              # }
              return(list(fitm_lavaan = fitm_lavaan, fitm_blavaan = fitm_blavaan))
            }
          }
        }
      }
      
    }
  }
}

# 2.3 Prepare parallelisation and rund sim fkt #################################

library(future)
library(furrr)

# Set up parallel plan
plan(multisession, workers = parallel::detectCores())

results <- future_map_dfr(seq_along(N_t), function(i) {
  run_sim(N_t[i], N_p[i], i)
})

# old parallelisation script
# 
# # Set up parallel backend the easy way
# # Using number of conditions or max available cores (whichever is smaller)
# 
# n_cores <- detectCores() - 1#min(detectCores() - 1, nrow(current_sim$combinations))
# cat(sprintf("Using %d cores for parallel processing\n", n_cores)) # this should be equal the number of cores on cluster
# 
# registerDoParallel(cores = n_cores) 
# 
# getDoParRegistered()
# getDoParWorkers()
# getDoParName()
# 
# run <- foreach (core=1:n_cores, .packages = c("mvtnorm", "blavaan", "lavaan", "matrixcalc")) %dopar% {
#   core
#   
#   N_t <- current_sim$combinations$timepoint
#   N_p <- current_sim$combinations$person_size
#   # N_t <- c(1,2)
#   # N_p <- c(15,31)
#   #run_sim(N_t, N_p)
#   run_sim(1,31)
# }
# 
# # Stop the parallel backend after usage
# stopImplicitCluster()

# Print completion message
print(paste("Simulation", sim_num, "completed at", Sys.time()))